version: '3.2'
services:
    eureka-service:
        container_name: eureka-service
        image: 127.0.0.1:4900/bookstore/eureka_service:latest
        build:
            context: Eureka-server
            dockerfile: Dockerfile
        ports:
            - "8761:8761"
        restart: always
        networks:
            - eureka-network

    main-service:
        container_name: main-gateway
        image: 127.0.0.1:4900/bookstore/gateway_service:latest
        build:
            context: maingateway
            dockerfile: Dockerfile
        ports:
            - "9091:9091"
        volumes:
          - type: bind
            source: ./logstash/logs/maingateway-service.log
            target: /maingateway-service.log
            read_only: false
        depends_on:
            - accounts-service
            - products-service
            - baskets-service
            - orders-service
            - eureka-service
            - storage-service
        environment:
            EUREKA_ADDR: eureka-service
        networks:
            - eureka-network

    accounts-service:
        container_name: accounts-service
        image: 127.0.0.1:4900/bookstore/accounts_service:latest
        build:
            context: Accounts-master
            dockerfile: Dockerfile
        ports:
            - "8081:8081"
        restart: always
        depends_on:
            - mysql-accounts
            - eureka-service
        environment:
            RDS_HOSTNAME: mysql-accounts
            RDS_PORT: 3306
            RDS_DB_NAME: db_accounts
            RDS_USERNAME: springuser
            RDS_PASSWORD: Password
            EUREKA_ADDR: eureka-service
        volumes:
          - type: bind
            source: ./logstash/logs/accounts-service.log
            target: /accounts-service.log
            read_only: false
        networks:
            - accounts-service-network
            - eureka-network

    products-service:
        container_name: products-service
        image: 127.0.0.1:4900/bookstore/products_service:latest
        build:
            context: Products-master
            dockerfile: Dockerfile
        ports:
            - "8084:8084"
        restart: always
        depends_on:
            - mysql-products
            - eureka-service
        environment:
            RDS_HOSTNAME: mysql-products
            RDS_PORT: 3306
            RDS_DB_NAME: db_products
            RDS_USERNAME: springuser
            RDS_PASSWORD: Password
            EUREKA_ADDR: eureka-service
        volumes:
          - type: bind
            source: ./logstash/logs/products-service.log
            target: /products-service.log
            read_only: false
        networks:
            - products-service-network
            - eureka-network

    baskets-service:
        container_name: baskets-service
        image: 127.0.0.1:4900/bookstore/baskets_service:latest
        build:
            context: Baskets-master
            dockerfile: Dockerfile
        ports:
            - "8082:8082"
        restart: always
        depends_on:
            - mysql-baskets
        environment:
            RDS_HOSTNAME: mysql-baskets
            RDS_PORT: 3306
            RDS_DB_NAME: db_baskets
            RDS_USERNAME: springuser
            RDS_PASSWORD: Password
            EUREKA_ADDR: eureka-service
        volumes:
          - type: bind
            source: ./logstash/logs/baskets-service.log
            target: /baskets-service.log
            read_only: false
        networks:
            - baskets-service-network
            - eureka-network

    orders-service:
        container_name: orders-service
        image: 127.0.0.1:4900/bookstore/orders_service:latest
        build:
            context: Orders-master
            dockerfile: Dockerfile
        ports:
            - "8083:8083"
        restart: always
        depends_on:
            - mysql-orders
        environment:
            RDS_HOSTNAME: mysql-orders
            RDS_PORT: 3306
            RDS_DB_NAME: db_orders
            RDS_USERNAME: springuser
            RDS_PASSWORD: Password
            EUREKA_ADDR: eureka-service
        volumes:
          - type: bind
            source: ./logstash/logs/orders-service.log
            target: /orders-service.log
            read_only: false
        networks:
            - orders-service-network
            - eureka-network

    storage-service:
        container_name: storage-service
        image: 127.0.0.1:4900/bookstore/storage_service:latest
        build:
            context: storage_service
            dockerfile: Dockerfile
        ports:
            - "8078:8078"
        restart: always
        depends_on:
            - mysql-storage
        environment:
            RDS_HOSTNAME: mysql-storage
            RDS_PORT: 3306
            RDS_DB_NAME: db_storage
            RDS_USERNAME: springuser
            RDS_PASSWORD: Password
            EUREKA_ADDR: eureka-service
        volumes:
          - type: bind
            source: ./logstash/logs/storage-service.log
            target: /storage-service.log
            read_only: false
        networks:
            - storage-service-network
            - eureka-network

    zipkin:
        image: openzipkin/zipkin
        container_name: zipkin
        ports:
            - 9411:9411

    mysql-accounts:
        image: mysql:5.7
        environment:
            MYSQL_ROOT_PASSWORD: Password
            MYSQL_USER: springuser
            MYSQL_PASSWORD: Password
            MYSQL_DATABASE: db_accounts

        container_name: mysql-accounts
        restart: always
        ports:
            - "3307:3306"
        volumes:
            - mysql-dbaccounts-volume:/var/lib/mysql
        networks:
            - accounts-service-network

    mysql-products:
        image: mysql:5.7
        environment:
            MYSQL_ROOT_PASSWORD: Password
            MYSQL_USER: springuser
            MYSQL_PASSWORD: Password
            MYSQL_DATABASE: db_products
        container_name: mysql-products
        restart: always
        ports:
            - "3308:3306"
        volumes:
            - mysql-dbproducts-volume:/var/lib/mysql
        networks:
            - products-service-network

    mysql-baskets:
        image: mysql:5.7
        environment:
            MYSQL_ROOT_PASSWORD: Password
            MYSQL_USER: springuser
            MYSQL_PASSWORD: Password
            MYSQL_DATABASE: db_baskets
        container_name: 'mysql-baskets'
        restart: always
        ports:
            - "3309:3306"
        volumes:
            - mysql-dbbaskets-volume:/var/lib/mysql
        networks:
            - baskets-service-network

    mysql-orders:
        image: mysql:5.7
        environment:
            MYSQL_ROOT_PASSWORD: Password
            MYSQL_USER: springuser
            MYSQL_PASSWORD: Password
            MYSQL_DATABASE: db_orders
        container_name: 'mysql-orders'
        restart: always
        ports:
            - 3310:3306
        volumes:
            - mysql-dborders-volume:/var/lib/mysql
        networks:
            - orders-service-network

    mysql-storage:
        image: mysql:5.7
        environment:
            MYSQL_ROOT_PASSWORD: Password
            MYSQL_USER: springuser
            MYSQL_PASSWORD: Password
            MYSQL_DATABASE: db_storage

        container_name: mysql-storage
        restart: always
        ports:
            - "3311:3306"
        volumes:
            - mysql-dbstorage-volume:/var/lib/mysql
        networks:
            - storage-service-network

    #ELK
    elasticsearch:
      container_name: elasticsearch
      image: elasticsearch:7.10.1
      volumes:
        - type: bind
          source: ./elasticsearch/config/elasticsearch.yml
          target: /usr/share/elasticsearch/config/elasticsearch.yml
          read_only: true
        - type: volume
          source: elasticsearch
          target: /usr/share/elasticsearch/data
      ports:
        - "9200:9200"
        - "9300:9300"
      environment:
        ES_JAVA_OPTS: "-Xmx256m -Xms256m"
        ELASTIC_PASSWORD: password
        # Use single node discovery in order to disable production mode and avoid bootstrap checks.
        # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
        discovery.type: single-node
      networks:
        - elk

    logstash:
      container_name: logstash
      image: logstash:7.10.1
      volumes:
        - type: bind
          source: ./logstash/config/logstash.yml
          target: /usr/share/logstash/config/logstash.yml
          read_only: true
        - type: bind
          source: ./logstash/pipeline
          target: /usr/share/logstash/pipeline
          read_only: true
        - type: bind
          source: ./logstash/logs
          target: /usr/share/logstash/logs
          read_only: true
      ports:
        - "5044:5044"
        - "5000:5000/tcp"
        - "5000:5000/udp"
        - "9600:9600"
      environment:
        LS_JAVA_OPTS: "-Xmx256m -Xms256m"
      networks:
        - elk
      depends_on:
        - elasticsearch

    kibana:
      container_name: kibana
      image: kibana:7.10.1
      volumes:
        - type: bind
          source: ./kibana/config/kibana.yml
          target: /usr/share/kibana/config/kibana.yml
          read_only: true
      ports:
        - "5601:5601"
      networks:
        - elk
      depends_on:
        - elasticsearch

volumes:
    mysql-dbaccounts-volume:
    mysql-dbproducts-volume:
    mysql-dbbaskets-volume:
    mysql-dborders-volume:
    mysql-dbstorage-volume:
    elasticsearch:

networks:
    accounts-service-network:
    products-service-network:
    baskets-service-network:
    orders-service-network:
    storage-service-network:
    eureka-network:
    elk:
